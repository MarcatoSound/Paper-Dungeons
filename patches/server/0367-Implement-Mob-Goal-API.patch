From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MiniDigger <admin@benndorf.dev>
Date: Fri, 3 Jan 2020 16:26:19 +0100
Subject: [PATCH] Implement Mob Goal API


diff --git a/build.gradle.kts b/build.gradle.kts
index 450f7c03bdcc109938ba9b66328bdbb2c96c03c9..c6241f858209ed662d8720217d143340916024e9 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -44,6 +44,7 @@ dependencies {
     runtimeOnly("org.apache.maven.resolver:maven-resolver-connector-basic:1.9.18")
     runtimeOnly("org.apache.maven.resolver:maven-resolver-transport-http:1.9.18")
 
+    testImplementation("io.github.classgraph:classgraph:4.8.47") // Paper - mob goal test
     testImplementation("org.junit.jupiter:junit-jupiter:5.10.0")
     testImplementation("org.hamcrest:hamcrest:2.2")
     testImplementation("org.mockito:mockito-core:5.5.0")
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/MobGoalHelper.java b/src/main/java/com/destroystokyo/paper/entity/ai/MobGoalHelper.java
new file mode 100644
index 0000000000000000000000000000000000000000..dfd77a09fd23acabec3ba40f23f01484e5bec84f
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/MobGoalHelper.java
@@ -0,0 +1,342 @@
+package com.destroystokyo.paper.entity.ai;
+
+import com.destroystokyo.paper.entity.RangedEntity;
+import com.google.common.base.CaseFormat;
+import java.lang.reflect.Constructor;
+import java.util.EnumSet;
+import java.util.HashMap;
+import java.util.Map;
+import net.minecraft.world.entity.FlyingMob;
+import net.minecraft.world.entity.PathfinderMob;
+import net.minecraft.world.entity.TamableAnimal;
+import net.minecraft.world.entity.ai.goal.Goal;
+import net.minecraft.world.entity.ambient.AmbientCreature;
+import net.minecraft.world.entity.animal.AbstractFish;
+import net.minecraft.world.entity.animal.AbstractGolem;
+import net.minecraft.world.entity.animal.AbstractSchoolingFish;
+import net.minecraft.world.entity.animal.Animal;
+import net.minecraft.world.entity.animal.Pufferfish;
+import net.minecraft.world.entity.animal.ShoulderRidingEntity;
+import net.minecraft.world.entity.animal.SnowGolem;
+import net.minecraft.world.entity.animal.WaterAnimal;
+import net.minecraft.world.entity.animal.horse.AbstractChestedHorse;
+import net.minecraft.world.entity.boss.wither.WitherBoss;
+import net.minecraft.world.entity.monster.AbstractIllager;
+import net.minecraft.world.entity.monster.EnderMan;
+import net.minecraft.world.entity.monster.PatrollingMonster;
+import net.minecraft.world.entity.monster.RangedAttackMob;
+import net.minecraft.world.entity.monster.SpellcasterIllager;
+import net.minecraft.world.entity.monster.ZombifiedPiglin;
+import net.minecraft.world.entity.monster.piglin.AbstractPiglin;
+import org.apache.commons.lang3.math.NumberUtils;
+import org.bukkit.NamespacedKey;
+import org.bukkit.entity.AbstractHorse;
+import org.bukkit.entity.AbstractSkeleton;
+import org.bukkit.entity.AbstractVillager;
+import org.bukkit.entity.Ageable;
+import org.bukkit.entity.Ambient;
+import org.bukkit.entity.Animals;
+import org.bukkit.entity.Bat;
+import org.bukkit.entity.Bee;
+import org.bukkit.entity.Blaze;
+import org.bukkit.entity.Cat;
+import org.bukkit.entity.CaveSpider;
+import org.bukkit.entity.ChestedHorse;
+import org.bukkit.entity.Chicken;
+import org.bukkit.entity.Cod;
+import org.bukkit.entity.Cow;
+import org.bukkit.entity.Creature;
+import org.bukkit.entity.Creeper;
+import org.bukkit.entity.Dolphin;
+import org.bukkit.entity.Donkey;
+import org.bukkit.entity.Drowned;
+import org.bukkit.entity.ElderGuardian;
+import org.bukkit.entity.EnderDragon;
+import org.bukkit.entity.Enderman;
+import org.bukkit.entity.Endermite;
+import org.bukkit.entity.Evoker;
+import org.bukkit.entity.Fish;
+import org.bukkit.entity.Flying;
+import org.bukkit.entity.Fox;
+import org.bukkit.entity.Ghast;
+import org.bukkit.entity.Giant;
+import org.bukkit.entity.Golem;
+import org.bukkit.entity.Guardian;
+import org.bukkit.entity.Hoglin;
+import org.bukkit.entity.Horse;
+import org.bukkit.entity.Husk;
+import org.bukkit.entity.Illager;
+import org.bukkit.entity.Illusioner;
+import org.bukkit.entity.IronGolem;
+import org.bukkit.entity.Llama;
+import org.bukkit.entity.MagmaCube;
+import org.bukkit.entity.Mob;
+import org.bukkit.entity.Monster;
+import org.bukkit.entity.Mule;
+import org.bukkit.entity.MushroomCow;
+import org.bukkit.entity.Ocelot;
+import org.bukkit.entity.Panda;
+import org.bukkit.entity.Parrot;
+import org.bukkit.entity.Phantom;
+import org.bukkit.entity.Pig;
+import org.bukkit.entity.PigZombie;
+import org.bukkit.entity.Piglin;
+import org.bukkit.entity.PiglinAbstract;
+import org.bukkit.entity.PiglinBrute;
+import org.bukkit.entity.Pillager;
+import org.bukkit.entity.PolarBear;
+import org.bukkit.entity.PufferFish;
+import org.bukkit.entity.Rabbit;
+import org.bukkit.entity.Raider;
+import org.bukkit.entity.Ravager;
+import org.bukkit.entity.Salmon;
+import org.bukkit.entity.Sheep;
+import org.bukkit.entity.Shulker;
+import org.bukkit.entity.Silverfish;
+import org.bukkit.entity.Skeleton;
+import org.bukkit.entity.SkeletonHorse;
+import org.bukkit.entity.Slime;
+import org.bukkit.entity.Snowman;
+import org.bukkit.entity.Spellcaster;
+import org.bukkit.entity.Spider;
+import org.bukkit.entity.Squid;
+import org.bukkit.entity.Stray;
+import org.bukkit.entity.Strider;
+import org.bukkit.entity.Tameable;
+import org.bukkit.entity.TraderLlama;
+import org.bukkit.entity.TropicalFish;
+import org.bukkit.entity.Turtle;
+import org.bukkit.entity.Vex;
+import org.bukkit.entity.Villager;
+import org.bukkit.entity.Vindicator;
+import org.bukkit.entity.WanderingTrader;
+import org.bukkit.entity.WaterMob;
+import org.bukkit.entity.Witch;
+import org.bukkit.entity.Wither;
+import org.bukkit.entity.WitherSkeleton;
+import org.bukkit.entity.Wolf;
+import org.bukkit.entity.Zoglin;
+import org.bukkit.entity.Zombie;
+import org.bukkit.entity.ZombieHorse;
+import org.bukkit.entity.ZombieVillager;
+
+public class MobGoalHelper {
+
+    private static final Map<Class<? extends Goal>, Class<? extends Mob>> entityClassCache = new HashMap<>();
+    private static final Map<Class<? extends net.minecraft.world.entity.Mob>, Class<? extends Mob>> bukkitMap = new HashMap<>();
+
+    static {
+        bukkitMap.put(net.minecraft.world.entity.Mob.class, Mob.class);
+        bukkitMap.put(net.minecraft.world.entity.AgeableMob.class, Ageable.class);
+        bukkitMap.put(AmbientCreature.class, Ambient.class);
+        bukkitMap.put(Animal.class, Animals.class);
+        bukkitMap.put(net.minecraft.world.entity.ambient.Bat.class, Bat.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Bee.class, Bee.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Blaze.class, Blaze.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Cat.class, Cat.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.CaveSpider.class, CaveSpider.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Chicken.class, Chicken.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Cod.class, Cod.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Cow.class, Cow.class);
+        bukkitMap.put(PathfinderMob.class, Creature.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Creeper.class, Creeper.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Dolphin.class, Dolphin.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Drowned.class, Drowned.class);
+        bukkitMap.put(net.minecraft.world.entity.boss.enderdragon.EnderDragon.class, EnderDragon.class);
+        bukkitMap.put(EnderMan.class, Enderman.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Endermite.class, Endermite.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Evoker.class, Evoker.class);
+        bukkitMap.put(AbstractFish.class, Fish.class);
+        bukkitMap.put(AbstractSchoolingFish.class, io.papermc.paper.entity.SchoolableFish.class);
+        bukkitMap.put(FlyingMob.class, Flying.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Fox.class, Fox.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Ghast.class, Ghast.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Giant.class, Giant.class);
+        bukkitMap.put(AbstractGolem.class, Golem.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Guardian.class, Guardian.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.ElderGuardian.class, ElderGuardian.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.horse.Horse.class, Horse.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.horse.AbstractHorse.class, AbstractHorse.class);
+        bukkitMap.put(AbstractChestedHorse.class, ChestedHorse.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.horse.Donkey.class, Donkey.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.horse.Mule.class, Mule.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.horse.SkeletonHorse.class, SkeletonHorse.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.horse.ZombieHorse.class, ZombieHorse.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.camel.Camel.class, org.bukkit.entity.Camel.class);
+        bukkitMap.put(AbstractIllager.class, Illager.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Illusioner.class, Illusioner.class);
+        bukkitMap.put(SpellcasterIllager.class, Spellcaster.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.IronGolem.class, IronGolem.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.horse.Llama.class, Llama.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.horse.TraderLlama.class, TraderLlama.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.MagmaCube.class, MagmaCube.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Monster.class, Monster.class);
+        bukkitMap.put(PatrollingMonster.class, Raider.class); // close enough
+        bukkitMap.put(net.minecraft.world.entity.animal.MushroomCow.class, MushroomCow.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Ocelot.class, Ocelot.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Panda.class, Panda.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Parrot.class, Parrot.class);
+        bukkitMap.put(ShoulderRidingEntity.class, Parrot.class); // close enough
+        bukkitMap.put(net.minecraft.world.entity.monster.Phantom.class, Phantom.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Pig.class, Pig.class);
+        bukkitMap.put(ZombifiedPiglin.class, PigZombie.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Pillager.class, Pillager.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.PolarBear.class, PolarBear.class);
+        bukkitMap.put(Pufferfish.class, PufferFish.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Rabbit.class, Rabbit.class);
+        bukkitMap.put(net.minecraft.world.entity.raid.Raider.class, Raider.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Ravager.class, Ravager.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Salmon.class, Salmon.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Sheep.class, Sheep.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Shulker.class, Shulker.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Silverfish.class, Silverfish.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Skeleton.class, Skeleton.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.AbstractSkeleton.class, AbstractSkeleton.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Stray.class, Stray.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.WitherSkeleton.class, WitherSkeleton.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Slime.class, Slime.class);
+        bukkitMap.put(SnowGolem.class, Snowman.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Spider.class, Spider.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Squid.class, Squid.class);
+        bukkitMap.put(TamableAnimal.class, Tameable.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.TropicalFish.class, TropicalFish.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Turtle.class, Turtle.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Vex.class, Vex.class);
+        bukkitMap.put(net.minecraft.world.entity.npc.Villager.class, Villager.class);
+        bukkitMap.put(net.minecraft.world.entity.npc.AbstractVillager.class, AbstractVillager.class);
+        bukkitMap.put(net.minecraft.world.entity.npc.WanderingTrader.class, WanderingTrader.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Vindicator.class, Vindicator.class);
+        bukkitMap.put(WaterAnimal.class, WaterMob.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Witch.class, Witch.class);
+        bukkitMap.put(WitherBoss.class, Wither.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.Wolf.class, Wolf.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Zombie.class, Zombie.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Husk.class, Husk.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.ZombieVillager.class, ZombieVillager.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.hoglin.Hoglin.class, Hoglin.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.piglin.Piglin.class, Piglin.class);
+        bukkitMap.put(AbstractPiglin.class, PiglinAbstract.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.piglin.PiglinBrute.class, PiglinBrute.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Strider.class, Strider.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.Zoglin.class, Zoglin.class);
+        bukkitMap.put(net.minecraft.world.entity.GlowSquid.class, org.bukkit.entity.GlowSquid.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.axolotl.Axolotl.class, org.bukkit.entity.Axolotl.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.goat.Goat.class, org.bukkit.entity.Goat.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.frog.Frog.class, org.bukkit.entity.Frog.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.frog.Tadpole.class, org.bukkit.entity.Tadpole.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.warden.Warden.class, org.bukkit.entity.Warden.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.allay.Allay.class, org.bukkit.entity.Allay.class);
+        bukkitMap.put(net.minecraft.world.entity.animal.sniffer.Sniffer.class, org.bukkit.entity.Sniffer.class);
+        bukkitMap.put(net.minecraft.world.entity.monster.breeze.Breeze.class, org.bukkit.entity.Breeze.class);
+    }
+
+    private static final Map<String, String> deobfuscationMap = new HashMap<>();
+
+    static {
+        // TODO these kinda should be checked on each release, in case obfuscation changes
+        deobfuscationMap.put("abstract_skeleton_1", "abstract_skeleton_melee");
+    }
+
+    private static String getPathName(String name) {
+        String pathName = name.substring(name.lastIndexOf('.') + 1);
+        boolean needDeobfMap = false;
+
+        // inner classes
+        int firstInnerDelimiter = pathName.indexOf('$');
+        if (firstInnerDelimiter != -1) {
+            String innerClassName = pathName.substring(firstInnerDelimiter + 1);
+            for (String nestedClass : innerClassName.split("\\$")) {
+                if (NumberUtils.isDigits(nestedClass)) {
+                    needDeobfMap = true;
+                    break;
+                }
+            }
+            if (!needDeobfMap) {
+                pathName = innerClassName;
+            }
+            pathName = pathName.replace('$', '_');
+            // mapped, wooo!
+        }
+
+        pathName = pathName.replace("TargetGoal", "");
+        pathName = pathName.replace("Goal", "");
+        pathName = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, pathName);
+
+        if (needDeobfMap && !deobfuscationMap.containsKey(pathName)) {
+            System.err.println("need to map " + name + " (" + pathName + ")");
+        }
+
+        // did we rename this key?
+        return deobfuscationMap.getOrDefault(pathName, pathName);
+    }
+
+    public static EnumSet<GoalType> vanillaToPaper(Goal goal) {
+        EnumSet<GoalType> goals = EnumSet.noneOf(GoalType.class);
+        for (GoalType type : GoalType.values()) {
+            if (goal.getFlags().contains(paperToVanilla(type))) {
+                goals.add(type);
+            }
+        }
+        return goals;
+    }
+
+    public static GoalType vanillaToPaper(Goal.Flag type) {
+        return switch (type) {
+            case MOVE -> GoalType.MOVE;
+            case LOOK -> GoalType.LOOK;
+            case JUMP -> GoalType.JUMP;
+            case UNKNOWN_BEHAVIOR -> GoalType.UNKNOWN_BEHAVIOR;
+            case TARGET -> GoalType.TARGET;
+            default -> throw new IllegalArgumentException("Unknown vanilla mob goal type " + type.name());
+        };
+    }
+
+    public static EnumSet<Goal.Flag> paperToVanilla(EnumSet<GoalType> types) {
+        EnumSet<Goal.Flag> goals = EnumSet.noneOf(Goal.Flag.class);
+        for (GoalType type : types) {
+            goals.add(paperToVanilla(type));
+        }
+        return goals;
+    }
+
+    public static Goal.Flag paperToVanilla(GoalType type) {
+        return switch (type) {
+            case MOVE -> Goal.Flag.MOVE;
+            case LOOK -> Goal.Flag.LOOK;
+            case JUMP -> Goal.Flag.JUMP;
+            case UNKNOWN_BEHAVIOR -> Goal.Flag.UNKNOWN_BEHAVIOR;
+            case TARGET -> Goal.Flag.TARGET;
+            default -> throw new IllegalArgumentException("Unknown paper mob goal type " + type.name());
+        };
+    }
+
+    public static <T extends Mob> GoalKey<T> getKey(Class<? extends Goal> goalClass) {
+        String name = getPathName(goalClass.getName());
+        return GoalKey.of(getEntity(goalClass), NamespacedKey.minecraft(name));
+    }
+
+    private static <T extends Mob> Class<T> getEntity(Class<? extends Goal> goalClass) {
+        //noinspection unchecked
+        return (Class<T>) entityClassCache.computeIfAbsent(goalClass, key -> {
+            for (Constructor<?> ctor : key.getDeclaredConstructors()) {
+                for (Class<?> param : ctor.getParameterTypes()) {
+                    if (net.minecraft.world.entity.Mob.class.isAssignableFrom(param)) {
+                        //noinspection unchecked
+                        Class<? extends Mob> bukkitClass = toBukkitClass((Class<? extends net.minecraft.world.entity.Mob>) param);
+                        if (bukkitClass == null) {
+                            throw new RuntimeException("Can't figure out applicable bukkit entity for nms entity " + param); // maybe just return Mob?
+                        }
+                        return bukkitClass;
+                    } else if (RangedAttackMob.class.isAssignableFrom(param)) {
+                        return RangedEntity.class;
+                    }
+                }
+            }
+            throw new RuntimeException("Can't figure out applicable entity for mob goal " + goalClass); // maybe just return Mob?
+        });
+    }
+
+    public static Class<? extends Mob> toBukkitClass(Class<? extends net.minecraft.world.entity.Mob> nmsClass) {
+        return bukkitMap.get(nmsClass);
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/PaperCustomGoal.java b/src/main/java/com/destroystokyo/paper/entity/ai/PaperCustomGoal.java
new file mode 100644
index 0000000000000000000000000000000000000000..b5f75ad725f5933db8f0688b2c0b27d620919241
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/PaperCustomGoal.java
@@ -0,0 +1,53 @@
+package com.destroystokyo.paper.entity.ai;
+
+import org.bukkit.entity.Mob;
+
+/**
+ * Wraps api in vanilla
+ */
+public class PaperCustomGoal<T extends Mob> extends net.minecraft.world.entity.ai.goal.Goal {
+
+    private final Goal<T> handle;
+
+    public PaperCustomGoal(Goal<T> handle) {
+        this.handle = handle;
+
+        this.setFlags(MobGoalHelper.paperToVanilla(handle.getTypes()));
+        if (this.getFlags().size() == 0) {
+            this.getFlags().add(Flag.UNKNOWN_BEHAVIOR);
+        }
+    }
+
+    @Override
+    public boolean canUse() {
+        return handle.shouldActivate();
+    }
+
+    @Override
+    public boolean canContinueToUse() {
+        return handle.shouldStayActive();
+    }
+
+    @Override
+    public void start() {
+        handle.start();
+    }
+
+    @Override
+    public void stop() {
+        handle.stop();
+    }
+
+    @Override
+    public void tick() {
+        handle.tick();
+    }
+
+    public Goal<T> getHandle() {
+        return handle;
+    }
+
+    public GoalKey<T> getKey() {
+        return handle.getKey();
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/PaperMobGoals.java b/src/main/java/com/destroystokyo/paper/entity/ai/PaperMobGoals.java
new file mode 100644
index 0000000000000000000000000000000000000000..953b0f88cbf0e73c390f8086344f772ac03192bb
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/PaperMobGoals.java
@@ -0,0 +1,213 @@
+package com.destroystokyo.paper.entity.ai;
+
+import java.util.Collection;
+import java.util.EnumSet;
+import java.util.HashSet;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Set;
+import net.minecraft.world.entity.ai.goal.GoalSelector;
+import net.minecraft.world.entity.ai.goal.WrappedGoal;
+import org.bukkit.craftbukkit.entity.CraftMob;
+import org.bukkit.entity.Mob;
+
+public class PaperMobGoals implements MobGoals {
+
+    @Override
+    public <T extends Mob> void addGoal(T mob, int priority, Goal<T> goal) {
+        CraftMob craftMob = (CraftMob) mob;
+        getHandle(craftMob, goal.getTypes()).addGoal(priority, new PaperCustomGoal<>(goal));
+    }
+
+    @Override
+    public <T extends Mob> void removeGoal(T mob, Goal<T> goal) {
+        CraftMob craftMob = (CraftMob) mob;
+        if (goal instanceof PaperCustomGoal) {
+            getHandle(craftMob, goal.getTypes()).removeGoal((net.minecraft.world.entity.ai.goal.Goal) goal);
+        } else if (goal instanceof PaperVanillaGoal) {
+            getHandle(craftMob, goal.getTypes()).removeGoal(((PaperVanillaGoal<?>) goal).getHandle());
+        } else {
+            List<net.minecraft.world.entity.ai.goal.Goal> toRemove = new LinkedList<>();
+            for (WrappedGoal item : getHandle(craftMob, goal.getTypes()).getAvailableGoals()) {
+                if (item.getGoal() instanceof PaperCustomGoal) {
+                    //noinspection unchecked
+                    if (((PaperCustomGoal<T>) item.getGoal()).getHandle() == goal) {
+                        toRemove.add(item.getGoal());
+                    }
+                }
+            }
+
+            for (net.minecraft.world.entity.ai.goal.Goal g : toRemove) {
+                getHandle(craftMob, goal.getTypes()).removeGoal(g);
+            }
+        }
+    }
+
+    @Override
+    public <T extends Mob> void removeAllGoals(T mob) {
+        for (GoalType type : GoalType.values()) {
+            removeAllGoals(mob, type);
+        }
+    }
+
+    @Override
+    public <T extends Mob> void removeAllGoals(T mob, GoalType type) {
+        for (Goal<T> goal : getAllGoals(mob, type)) {
+            removeGoal(mob, goal);
+        }
+    }
+
+    @Override
+    public <T extends Mob> void removeGoal(T mob, GoalKey<T> key) {
+        for (Goal<T> goal : getGoals(mob, key)) {
+            removeGoal(mob, goal);
+        }
+    }
+
+    @Override
+    public <T extends Mob> boolean hasGoal(T mob, GoalKey<T> key) {
+        for (Goal<T> g : getAllGoals(mob)) {
+            if (g.getKey().equals(key)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    @Override
+    public <T extends Mob> Goal<T> getGoal(T mob, GoalKey<T> key) {
+        for (Goal<T> g : getAllGoals(mob)) {
+            if (g.getKey().equals(key)) {
+                return g;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public <T extends Mob> Collection<Goal<T>> getGoals(T mob, GoalKey<T> key) {
+        Set<Goal<T>> goals = new HashSet<>();
+        for (Goal<T> g : getAllGoals(mob)) {
+            if (g.getKey().equals(key)) {
+                goals.add(g);
+            }
+        }
+        return goals;
+    }
+
+    @Override
+    public <T extends Mob> Collection<Goal<T>> getAllGoals(T mob) {
+        Set<Goal<T>> goals = new HashSet<>();
+        for (GoalType type : GoalType.values()) {
+            goals.addAll(getAllGoals(mob, type));
+        }
+        return goals;
+    }
+
+    @Override
+    public <T extends Mob> Collection<Goal<T>> getAllGoals(T mob, GoalType type) {
+        CraftMob craftMob = (CraftMob) mob;
+        Set<Goal<T>> goals = new HashSet<>();
+        for (WrappedGoal item : getHandle(craftMob, type).getAvailableGoals()) {
+            if (!item.getGoal().getFlags().contains(MobGoalHelper.paperToVanilla(type))) {
+                continue;
+            }
+
+            if (item.getGoal() instanceof PaperCustomGoal) {
+                //noinspection unchecked
+                goals.add(((PaperCustomGoal<T>) item.getGoal()).getHandle());
+            } else {
+                goals.add(item.getGoal().asPaperVanillaGoal());
+            }
+        }
+        return goals;
+    }
+
+    @Override
+    public <T extends Mob> Collection<Goal<T>> getAllGoalsWithout(T mob, GoalType type) {
+        CraftMob craftMob = (CraftMob) mob;
+        Set<Goal<T>> goals = new HashSet<>();
+        for (GoalType internalType : GoalType.values()) {
+            if (internalType == type) {
+                continue;
+            }
+            for (WrappedGoal item : getHandle(craftMob, internalType).getAvailableGoals()) {
+                if (item.getGoal().getFlags().contains(MobGoalHelper.paperToVanilla(type))) {
+                    continue;
+                }
+
+                if (item.getGoal() instanceof PaperCustomGoal) {
+                    //noinspection unchecked
+                    goals.add(((PaperCustomGoal<T>) item.getGoal()).getHandle());
+                } else {
+                    goals.add(item.getGoal().asPaperVanillaGoal());
+                }
+            }
+        }
+        return goals;
+    }
+
+    @Override
+    public <T extends Mob> Collection<Goal<T>> getRunningGoals(T mob) {
+        Set<Goal<T>> goals = new HashSet<>();
+        for (GoalType type : GoalType.values()) {
+            goals.addAll(getRunningGoals(mob, type));
+        }
+        return goals;
+    }
+
+    @Override
+    public <T extends Mob> Collection<Goal<T>> getRunningGoals(T mob, GoalType type) {
+        CraftMob craftMob = (CraftMob) mob;
+        Set<Goal<T>> goals = new HashSet<>();
+        getHandle(craftMob, type).getRunningGoals()
+            .filter(item -> item.getGoal().getFlags().contains(MobGoalHelper.paperToVanilla(type)))
+            .forEach(item -> {
+                if (item.getGoal() instanceof PaperCustomGoal) {
+                    //noinspection unchecked
+                    goals.add(((PaperCustomGoal<T>) item.getGoal()).getHandle());
+                } else {
+                    goals.add(item.getGoal().asPaperVanillaGoal());
+                }
+            });
+        return goals;
+    }
+
+    @Override
+    public <T extends Mob> Collection<Goal<T>> getRunningGoalsWithout(T mob, GoalType type) {
+        CraftMob craftMob = (CraftMob) mob;
+        Set<Goal<T>> goals = new HashSet<>();
+        for (GoalType internalType : GoalType.values()) {
+            if (internalType == type) {
+                continue;
+            }
+            getHandle(craftMob, internalType).getRunningGoals()
+                .filter(item -> !item.getGoal().getFlags().contains(MobGoalHelper.paperToVanilla(type)))
+                .forEach(item -> {
+                    if (item.getGoal() instanceof PaperCustomGoal) {
+                        //noinspection unchecked
+                        goals.add(((PaperCustomGoal<T>) item.getGoal()).getHandle());
+                    } else {
+                        goals.add(item.getGoal().asPaperVanillaGoal());
+                    }
+                });
+        }
+        return goals;
+    }
+
+    private GoalSelector getHandle(CraftMob mob, EnumSet<GoalType> types) {
+        if (types.contains(GoalType.TARGET)) {
+            return mob.getHandle().targetSelector;
+        } else {
+            return mob.getHandle().goalSelector;
+        }
+    }
+
+    private GoalSelector getHandle(CraftMob mob, GoalType type) {
+        if (type == GoalType.TARGET) {
+            return mob.getHandle().targetSelector;
+        } else {
+            return mob.getHandle().goalSelector;
+        }
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/PaperVanillaGoal.java b/src/main/java/com/destroystokyo/paper/entity/ai/PaperVanillaGoal.java
new file mode 100644
index 0000000000000000000000000000000000000000..b5c594a5499556ad452d9939c75e150af8252e90
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/PaperVanillaGoal.java
@@ -0,0 +1,61 @@
+package com.destroystokyo.paper.entity.ai;
+
+import java.util.EnumSet;
+import net.minecraft.world.entity.ai.goal.Goal;
+import org.bukkit.entity.Mob;
+
+/**
+ * Wraps vanilla in api
+ */
+public class PaperVanillaGoal<T extends Mob> implements VanillaGoal<T> {
+
+    private final Goal handle;
+    private final GoalKey<T> key;
+
+    private final EnumSet<GoalType> types;
+
+    public PaperVanillaGoal(Goal handle) {
+        this.handle = handle;
+        this.key = MobGoalHelper.getKey(handle.getClass());
+        this.types = MobGoalHelper.vanillaToPaper(handle);
+    }
+
+    public Goal getHandle() {
+        return handle;
+    }
+
+    @Override
+    public boolean shouldActivate() {
+        return handle.canUse();
+    }
+
+    @Override
+    public boolean shouldStayActive() {
+        return handle.canContinueToUse();
+    }
+
+    @Override
+    public void start() {
+        handle.start();
+    }
+
+    @Override
+    public void stop() {
+        handle.stop();
+    }
+
+    @Override
+    public void tick() {
+        handle.tick();
+    }
+
+    @Override
+    public GoalKey<T> getKey() {
+        return key;
+    }
+
+    @Override
+    public EnumSet<GoalType> getTypes() {
+        return types;
+    }
+}
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/Goal.java b/src/main/java/net/minecraft/world/entity/ai/goal/Goal.java
index 6667ecc4b7eded4e20a415cef1e1b1179e6710b8..16f9a98b8a939e5ca7e2dc04f87134a7ed66736b 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/Goal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/Goal.java
@@ -51,7 +51,19 @@ public abstract class Goal {
         return Mth.positiveCeilDiv(serverTicks, 2);
     }
 
+    // Paper start - Mob goal api
+    private com.destroystokyo.paper.entity.ai.PaperVanillaGoal<?> vanillaGoal;
+    public <T extends org.bukkit.entity.Mob> com.destroystokyo.paper.entity.ai.Goal<T> asPaperVanillaGoal() {
+        if(this.vanillaGoal == null) {
+            this.vanillaGoal = new com.destroystokyo.paper.entity.ai.PaperVanillaGoal<>(this);
+        }
+        //noinspection unchecked
+        return (com.destroystokyo.paper.entity.ai.Goal<T>) this.vanillaGoal;
+    }
+    // Paper end - Mob goal api
+
     public static enum Flag {
+        UNKNOWN_BEHAVIOR, // Paper - add UNKNOWN_BEHAVIOR
         MOVE,
         LOOK,
         JUMP,
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 0a6b283aee63adb09cf1466fb18406f941466cd0..12b76fd9d3d5e8dcca31d7e82f6956e13447ff64 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -2889,5 +2889,11 @@ public final class CraftServer implements Server {
     public boolean isStopping() {
         return net.minecraft.server.MinecraftServer.getServer().hasStopped();
     }
+
+    private com.destroystokyo.paper.entity.ai.MobGoals mobGoals = new com.destroystokyo.paper.entity.ai.PaperMobGoals();
+    @Override
+    public com.destroystokyo.paper.entity.ai.MobGoals getMobGoals() {
+        return mobGoals;
+    }
     // Paper end
 }
diff --git a/src/test/java/io/papermc/paper/entity/ai/MobGoalConverterTest.java b/src/test/java/io/papermc/paper/entity/ai/MobGoalConverterTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..b020f795846d98f5464b390008be8815e892f9e8
--- /dev/null
+++ b/src/test/java/io/papermc/paper/entity/ai/MobGoalConverterTest.java
@@ -0,0 +1,37 @@
+package io.papermc.paper.entity.ai;
+
+import com.destroystokyo.paper.entity.ai.MobGoalHelper;
+import io.github.classgraph.ClassGraph;
+import io.github.classgraph.ScanResult;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.Mob;
+import org.junit.jupiter.api.Test;
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.fail;
+
+public class MobGoalConverterTest {
+
+    @Test
+    public void testBukkitMap() {
+        List<Class<Mob>> classes;
+        try (ScanResult scanResult = new ClassGraph().enableAllInfo().whitelistPackages(Entity.class.getPackageName()).scan()) {
+            classes = scanResult.getSubclasses(Mob.class.getName()).loadClasses(Mob.class);
+        }
+        assertFalse(classes.isEmpty(), "There are supposed to be more than 0 mob classes!");
+
+        List<String> missingClasses = new ArrayList<>();
+        for (Class<Mob> nmsClass : classes) {
+            Class<? extends org.bukkit.entity.Mob> bukkitClass = MobGoalHelper.toBukkitClass(nmsClass);
+            if (bukkitClass == null) {
+                missingClasses.add(nmsClass.getCanonicalName());
+            }
+        }
+
+        if (!missingClasses.isEmpty()) {
+            fail("Missing some entity classes in the bukkit map (MobGoalHelper): " + String.join(", ", missingClasses));
+        }
+    }
+}
